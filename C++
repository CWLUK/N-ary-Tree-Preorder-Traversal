/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/
/*
class Solution {
public:
    vector<int> preorder(Node* root) {
        vector<int> result;
        
        if (!root) return result;
        
        stack<Node*> stack;
        stack.push(root);
        Node* cur;
        
        while (!stack.empty()){
            cur = stack.top();
            stack.pop();
            result.push_back(cur->val);
            for (int i = cur->children.size()-1; i>=0; i--){
                stack.push(cur->children[i]);
            }
        }
        
        return result;
        
    }
};
*/
class Solution {
public:
    void pre_traversal(Node* root, vector<int>& result){
        if (!root) return;
        
        result.push_back(root->val);
        
        for (auto child: root->children){
            pre_traversal(child, result);
        }
    }
        
    vector<int> preorder(Node* root) {
        vector<int> result;
        pre_traversal(root, result);      
        return result;
        
    }
};
