/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/
/*
class Solution {
    public List<Integer> preorder(Node root) {
        List<Integer> result = new ArrayList<Integer>();
        
        if (root == null) return result;
        
        Stack<Node> stack = new Stack<Node>();
        stack.push(root);
        
        while (!stack.isEmpty()){
            root = stack.pop();
            result.add(root.val);
            for (int i = root.children.size()-1; i>=0; i--){
                stack.push(root.children.get(i));
            }
        }
        
        return result;
        
    }
}
*/

class Solution {
    
    List<Integer> result = new ArrayList<Integer>();
    
    public List<Integer> preorder(Node root) {
        if (root == null) return result;
        result.add(root.val);
        for (Node child: root.children){
            preorder(child);
        }
        return result; 
    }
}
